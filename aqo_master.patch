diff --git a/contrib/Makefile b/contrib/Makefile
index f27e458482..0c62191904 100644
--- a/contrib/Makefile
+++ b/contrib/Makefile
@@ -7,6 +7,7 @@ include $(top_builddir)/src/Makefile.global
 SUBDIRS = \
 		adminpack	\
 		amcheck		\
+		aqo		\
 		auth_delay	\
 		auto_explain	\
 		bloom		\
diff --git a/src/backend/commands/explain.c b/src/backend/commands/explain.c
index e81b990092..157f6e2721 100644
--- a/src/backend/commands/explain.c
+++ b/src/backend/commands/explain.c
@@ -24,6 +24,7 @@
 #include "nodes/extensible.h"
 #include "nodes/makefuncs.h"
 #include "nodes/nodeFuncs.h"
+#include "optimizer/cost.h"
 #include "parser/analyze.h"
 #include "parser/parsetree.h"
 #include "rewrite/rewriteHandler.h"
@@ -47,6 +48,12 @@ ExplainOneQuery_hook_type ExplainOneQuery_hook = NULL;
 /* Hook for plugins to get control in explain_get_index_name() */
 explain_get_index_name_hook_type explain_get_index_name_hook = NULL;
 
+/* Hook for plugins to get control in ExplainOnePlan() */
+ExplainOnePlan_hook_type ExplainOnePlan_hook = NULL;
+
+/* Hook for plugins to get control in ExplainOnePlan() */
+ExplainOneNode_hook_type ExplainOneNode_hook = NULL;
+
 
 /* OR-able flags for ExplainXMLTag() */
 #define X_OPENING 0
@@ -668,6 +675,10 @@ ExplainOnePlan(PlannedStmt *plannedstmt, IntoClause *into, ExplainState *es,
 		ExplainPropertyFloat("Execution Time", "ms", 1000.0 * totaltime, 3,
 							 es);
 
+	if (ExplainOnePlan_hook)
+		ExplainOnePlan_hook(plannedstmt, into, es,
+							queryString, params, planduration, queryEnv);
+
 	ExplainCloseGroup("Query", NULL, true, es);
 }
 
@@ -1620,6 +1631,9 @@ ExplainNode(PlanState *planstate, List *ancestors,
 				appendStringInfo(es->str,
 								 " (actual rows=%.0f loops=%.0f)",
 								 rows, nloops);
+
+			if (ExplainOneNode_hook)
+				ExplainOneNode_hook(es, planstate, plan, rows);
 		}
 		else
 		{
diff --git a/src/backend/nodes/copyfuncs.c b/src/backend/nodes/copyfuncs.c
index bd87f23784..d0a87fc57e 100644
--- a/src/backend/nodes/copyfuncs.c
+++ b/src/backend/nodes/copyfuncs.c
@@ -127,6 +127,12 @@ CopyPlanFields(const Plan *from, Plan *newnode)
 	COPY_NODE_FIELD(lefttree);
 	COPY_NODE_FIELD(righttree);
 	COPY_NODE_FIELD(initPlan);
+	COPY_SCALAR_FIELD(had_path);
+	COPY_NODE_FIELD(path_clauses);
+	COPY_NODE_FIELD(path_relids);
+	COPY_SCALAR_FIELD(path_jointype);
+	COPY_SCALAR_FIELD(path_parallel_workers);
+	COPY_SCALAR_FIELD(was_parametrized);
 	COPY_BITMAPSET_FIELD(extParam);
 	COPY_BITMAPSET_FIELD(allParam);
 }
diff --git a/src/backend/optimizer/path/costsize.c b/src/backend/optimizer/path/costsize.c
index 8577c7b138..02e59233e2 100644
--- a/src/backend/optimizer/path/costsize.c
+++ b/src/backend/optimizer/path/costsize.c
@@ -98,6 +98,11 @@
 #include "utils/spccache.h"
 #include "utils/tuplesort.h"
 
+set_baserel_rows_estimate_hook_type set_baserel_rows_estimate_hook = NULL;
+set_foreign_rows_estimate_hook_type set_foreign_rows_estimate_hook = NULL;
+get_parameterized_baserel_size_hook_type get_parameterized_baserel_size_hook = NULL;
+get_parameterized_joinrel_size_hook_type get_parameterized_joinrel_size_hook = NULL;
+set_joinrel_size_estimates_hook_type set_joinrel_size_estimates_hook = NULL;
 
 #define LOG2(x)  (log(x) / 0.693147180559945)
 
@@ -188,7 +193,6 @@ static Cost append_nonpartial_cost(List *subpaths, int numpaths,
 static void set_rel_width(PlannerInfo *root, RelOptInfo *rel);
 static double relation_byte_size(double tuples, int width);
 static double page_size(double tuples, int width);
-static double get_parallel_divisor(Path *path);
 
 
 /*
@@ -269,7 +273,7 @@ cost_seqscan(Path *path, PlannerInfo *root,
 	/* Adjust costing for parallelism, if used. */
 	if (path->parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(path);
+		double		parallel_divisor = get_parallel_divisor(path->parallel_workers);
 
 		/* The CPU cost is divided among all the workers. */
 		cpu_run_cost /= parallel_divisor;
@@ -748,7 +752,7 @@ cost_index(IndexPath *path, PlannerInfo *root, double loop_count,
 	/* Adjust costing for parallelism, if used. */
 	if (path->path.parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(&path->path);
+		double		parallel_divisor = get_parallel_divisor(path->path.parallel_workers);
 
 		path->path.rows = clamp_row_est(path->path.rows / parallel_divisor);
 
@@ -1029,7 +1033,7 @@ cost_bitmap_heap_scan(Path *path, PlannerInfo *root, RelOptInfo *baserel,
 	/* Adjust costing for parallelism, if used. */
 	if (path->parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(path);
+		double		parallel_divisor = get_parallel_divisor(path->parallel_workers);
 
 		/* The CPU cost is divided among all the workers. */
 		cpu_run_cost /= parallel_divisor;
@@ -2228,7 +2232,7 @@ cost_append(AppendPath *apath)
 	else						/* parallel-aware */
 	{
 		int			i = 0;
-		double		parallel_divisor = get_parallel_divisor(&apath->path);
+		double		parallel_divisor = get_parallel_divisor(apath->path.parallel_workers);
 
 		/* Parallel-aware Append never produces ordered output. */
 		Assert(apath->path.pathkeys == NIL);
@@ -2262,7 +2266,7 @@ cost_append(AppendPath *apath)
 			{
 				double		subpath_parallel_divisor;
 
-				subpath_parallel_divisor = get_parallel_divisor(subpath);
+				subpath_parallel_divisor = get_parallel_divisor(subpath->parallel_workers);
 				apath->path.rows += subpath->rows * (subpath_parallel_divisor /
 													 parallel_divisor);
 				apath->path.total_cost += subpath->total_cost;
@@ -3002,7 +3006,7 @@ final_cost_nestloop(PlannerInfo *root, NestPath *path,
 	/* For partial paths, scale row estimate. */
 	if (path->path.parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(&path->path);
+		double		parallel_divisor = get_parallel_divisor(path->path.parallel_workers);
 
 		path->path.rows =
 			clamp_row_est(path->path.rows / parallel_divisor);
@@ -3448,7 +3452,7 @@ final_cost_mergejoin(PlannerInfo *root, MergePath *path,
 	/* For partial paths, scale row estimate. */
 	if (path->jpath.path.parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(&path->jpath.path);
+		double		parallel_divisor = get_parallel_divisor(path->jpath.path.parallel_workers);
 
 		path->jpath.path.rows =
 			clamp_row_est(path->jpath.path.rows / parallel_divisor);
@@ -3782,7 +3786,7 @@ initial_cost_hashjoin(PlannerInfo *root, JoinCostWorkspace *workspace,
 	 * number, so we need to undo the division.
 	 */
 	if (parallel_hash)
-		inner_path_rows_total *= get_parallel_divisor(inner_path);
+		inner_path_rows_total *= get_parallel_divisor(inner_path->parallel_workers);
 
 	/*
 	 * Get hash table size that executor would use for inner relation.
@@ -3879,7 +3883,7 @@ final_cost_hashjoin(PlannerInfo *root, HashPath *path,
 	/* For partial paths, scale row estimate. */
 	if (path->jpath.path.parallel_workers > 0)
 	{
-		double		parallel_divisor = get_parallel_divisor(&path->jpath.path);
+		double		parallel_divisor = get_parallel_divisor(path->jpath.path.parallel_workers);
 
 		path->jpath.path.rows =
 			clamp_row_est(path->jpath.path.rows / parallel_divisor);
@@ -4908,6 +4912,58 @@ approx_tuple_count(PlannerInfo *root, JoinPath *path, List *quals)
 }
 
 
+void
+set_foreign_rows_estimate(PlannerInfo *root, RelOptInfo *rel)
+{
+	if (set_foreign_rows_estimate_hook)
+		(*set_foreign_rows_estimate_hook) (root, rel);
+	else
+		rel->rows = 1000;			/* entirely bogus default estimate */
+}
+
+/*
+ * set_baserel_rows_estimate
+ *		Set the rows estimate for the given base relation.
+ *
+ * Rows is the estimated number of output tuples after applying
+ * restriction clauses.
+ *
+ * To support loadable plugins that monitor or modify cardinality estimation,
+ * we provide a hook variable that lets a plugin get control before and
+ * after the cardinality estimation.
+ * The hook must set rel->rows.
+ */
+void
+set_baserel_rows_estimate(PlannerInfo *root, RelOptInfo *rel)
+{
+	if (set_baserel_rows_estimate_hook)
+		(*set_baserel_rows_estimate_hook) (root, rel);
+	else
+		set_baserel_rows_estimate_standard(root, rel);
+}
+
+/*
+ * set_baserel_rows_estimate
+ *		Set the rows estimate for the given base relation.
+ *
+ * Rows is the estimated number of output tuples after applying
+ * restriction clauses.
+ */
+void
+set_baserel_rows_estimate_standard(PlannerInfo *root, RelOptInfo *rel)
+{
+	double		nrows;
+
+	nrows = rel->tuples *
+		clauselist_selectivity(root,
+							   rel->baserestrictinfo,
+							   0,
+							   JOIN_INNER,
+							   NULL);
+
+	rel->rows = clamp_row_est(nrows);
+}
+
 /*
  * set_baserel_size_estimates
  *		Set the size estimates for the given base relation.
@@ -4924,19 +4980,10 @@ approx_tuple_count(PlannerInfo *root, JoinPath *path, List *quals)
 void
 set_baserel_size_estimates(PlannerInfo *root, RelOptInfo *rel)
 {
-	double		nrows;
-
 	/* Should only be applied to base relations */
 	Assert(rel->relid > 0);
 
-	nrows = rel->tuples *
-		clauselist_selectivity(root,
-							   rel->baserestrictinfo,
-							   0,
-							   JOIN_INNER,
-							   NULL);
-
-	rel->rows = clamp_row_est(nrows);
+	set_baserel_rows_estimate(root, rel);
 
 	cost_qual_eval(&rel->baserestrictcost, rel->baserestrictinfo, root);
 
@@ -4947,13 +4994,33 @@ set_baserel_size_estimates(PlannerInfo *root, RelOptInfo *rel)
  * get_parameterized_baserel_size
  *		Make a size estimate for a parameterized scan of a base relation.
  *
+ * To support loadable plugins that monitor or modify cardinality estimation,
+ * we provide a hook variable that lets a plugin get control before and
+ * after the cardinality estimation.
+ */
+double
+get_parameterized_baserel_size(PlannerInfo *root, RelOptInfo *rel,
+							   List *param_clauses)
+{
+	if (get_parameterized_baserel_size_hook)
+		return (*get_parameterized_baserel_size_hook) (root, rel,
+													   param_clauses);
+	else
+		return get_parameterized_baserel_size_standard(root, rel,
+													   param_clauses);
+}
+
+/*
+ * get_parameterized_baserel_size_standard
+ *		Make a size estimate for a parameterized scan of a base relation.
+ *
  * 'param_clauses' lists the additional join clauses to be used.
  *
  * set_baserel_size_estimates must have been applied already.
  */
 double
-get_parameterized_baserel_size(PlannerInfo *root, RelOptInfo *rel,
-							   List *param_clauses)
+get_parameterized_baserel_size_standard(PlannerInfo *root, RelOptInfo *rel,
+										List *param_clauses)
 {
 	List	   *allclauses;
 	double		nrows;
@@ -4982,6 +5049,36 @@ get_parameterized_baserel_size(PlannerInfo *root, RelOptInfo *rel,
  * set_joinrel_size_estimates
  *		Set the size estimates for the given join relation.
  *
+ * To support loadable plugins that monitor or modify cardinality estimation,
+ * we provide a hook variable that lets a plugin get control before and
+ * after the cardinality estimation.
+ * The hook must set rel->rows value.
+ */
+void
+set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
+						   RelOptInfo *outer_rel,
+						   RelOptInfo *inner_rel,
+						   SpecialJoinInfo *sjinfo,
+						   List *restrictlist)
+{
+	if (set_joinrel_size_estimates_hook)
+		(*set_joinrel_size_estimates_hook) (root, rel,
+											outer_rel,
+											inner_rel,
+											sjinfo,
+											restrictlist);
+	else
+		set_joinrel_size_estimates_standard(root, rel,
+											outer_rel,
+											inner_rel,
+											sjinfo,
+											restrictlist);
+}
+
+/*
+ * set_joinrel_size_estimates_standard
+ *		Set the size estimates for the given join relation.
+ *
  * The rel's targetlist must have been constructed already, and a
  * restriction clause list that matches the given component rels must
  * be provided.
@@ -5001,11 +5098,11 @@ get_parameterized_baserel_size(PlannerInfo *root, RelOptInfo *rel,
  * build_joinrel_tlist, and baserestrictcost is not used for join rels.
  */
 void
-set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
-						   RelOptInfo *outer_rel,
-						   RelOptInfo *inner_rel,
-						   SpecialJoinInfo *sjinfo,
-						   List *restrictlist)
+set_joinrel_size_estimates_standard(PlannerInfo *root, RelOptInfo *rel,
+									RelOptInfo *outer_rel,
+									RelOptInfo *inner_rel,
+									SpecialJoinInfo *sjinfo,
+									List *restrictlist)
 {
 	rel->rows = calc_joinrel_size_estimate(root,
 										   rel,
@@ -5021,6 +5118,35 @@ set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
  * get_parameterized_joinrel_size
  *		Make a size estimate for a parameterized scan of a join relation.
  *
+ * To support loadable plugins that monitor or modify cardinality estimation,
+ * we provide a hook variable that lets a plugin get control before and
+ * after the cardinality estimation.
+ */
+double
+get_parameterized_joinrel_size(PlannerInfo *root, RelOptInfo *rel,
+							   Path *outer_path,
+							   Path *inner_path,
+							   SpecialJoinInfo *sjinfo,
+							   List *restrict_clauses)
+{
+	if (get_parameterized_joinrel_size_hook)
+		return (*get_parameterized_joinrel_size_hook) (root, rel,
+													   outer_path,
+													   inner_path,
+													   sjinfo,
+													   restrict_clauses);
+	else
+		return get_parameterized_joinrel_size_standard(root, rel,
+													   outer_path,
+													   inner_path,
+													   sjinfo,
+													   restrict_clauses);
+}
+
+/*
+ * get_parameterized_joinrel_size_standard
+ *		Make a size estimate for a parameterized scan of a join relation.
+ *
  * 'rel' is the joinrel under consideration.
  * 'outer_path', 'inner_path' are (probably also parameterized) Paths that
  *		produce the relations being joined.
@@ -5033,11 +5159,11 @@ set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
  * set_joinrel_size_estimates must have been applied already.
  */
 double
-get_parameterized_joinrel_size(PlannerInfo *root, RelOptInfo *rel,
-							   Path *outer_path,
-							   Path *inner_path,
-							   SpecialJoinInfo *sjinfo,
-							   List *restrict_clauses)
+get_parameterized_joinrel_size_standard(PlannerInfo *root, RelOptInfo *rel,
+										Path *outer_path,
+										Path *inner_path,
+										SpecialJoinInfo *sjinfo,
+										List *restrict_clauses)
 {
 	double		nrows;
 
@@ -5753,7 +5879,7 @@ set_foreign_size_estimates(PlannerInfo *root, RelOptInfo *rel)
 	/* Should only be applied to base relations */
 	Assert(rel->relid > 0);
 
-	rel->rows = 1000;			/* entirely bogus default estimate */
+	set_foreign_rows_estimate(root, rel);
 
 	cost_qual_eval(&rel->baserestrictcost, rel->baserestrictinfo, root);
 
@@ -6035,14 +6161,25 @@ page_size(double tuples, int width)
 	return ceil(relation_byte_size(tuples, width) / BLCKSZ);
 }
 
+bool
+IsParallelTuplesProcessing(const Plan *plan)
+{
+	if (plan->path_parallel_workers > 0 && (
+		plan->parallel_aware || nodeTag(plan) == T_HashJoin ||
+								nodeTag(plan) == T_MergeJoin ||
+								nodeTag(plan) == T_NestLoop))
+		return true;
+	return false;
+}
+
 /*
  * Estimate the fraction of the work that each worker will do given the
  * number of workers budgeted for the path.
  */
-static double
-get_parallel_divisor(Path *path)
+double
+get_parallel_divisor(int parallel_workers)
 {
-	double		parallel_divisor = path->parallel_workers;
+	double		parallel_divisor = parallel_workers;
 
 	/*
 	 * Early experience with parallel query suggests that when there is only
@@ -6059,7 +6196,7 @@ get_parallel_divisor(Path *path)
 	{
 		double		leader_contribution;
 
-		leader_contribution = 1.0 - (0.3 * path->parallel_workers);
+		leader_contribution = 1.0 - (0.3 * parallel_workers);
 		if (leader_contribution > 0)
 			parallel_divisor += leader_contribution;
 	}
diff --git a/src/backend/optimizer/plan/createplan.c b/src/backend/optimizer/plan/createplan.c
index 439e6b6426..deadcfabb6 100644
--- a/src/backend/optimizer/plan/createplan.c
+++ b/src/backend/optimizer/plan/createplan.c
@@ -71,6 +71,7 @@
 #define CP_LABEL_TLIST		0x0004	/* tlist must contain sortgrouprefs */
 #define CP_IGNORE_TLIST		0x0008	/* caller will replace tlist */
 
+create_plan_hook_type create_plan_hook = NULL;
 
 static Plan *create_plan_recurse(PlannerInfo *root, Path *best_path,
 								 int flags);
@@ -546,6 +547,10 @@ create_plan_recurse(PlannerInfo *root, Path *best_path, int flags)
 			break;
 	}
 
+	if (create_plan_hook)
+		/* Give an extension a chance to do something */
+		(*create_plan_hook)(root, best_path, &plan);
+
 	return plan;
 }
 
diff --git a/src/backend/optimizer/util/relnode.c b/src/backend/optimizer/util/relnode.c
index e105a4d5f1..392bed5222 100644
--- a/src/backend/optimizer/util/relnode.c
+++ b/src/backend/optimizer/util/relnode.c
@@ -1279,6 +1279,7 @@ find_childrel_parents(PlannerInfo *root, RelOptInfo *rel)
 }
 
 
+set_parampathinfo_postinit_hook_type parampathinfo_postinit_hook = NULL;
 /*
  * get_baserel_parampathinfo
  *		Get the ParamPathInfo for a parameterized path for a base relation,
@@ -1347,6 +1348,10 @@ get_baserel_parampathinfo(PlannerInfo *root, RelOptInfo *baserel,
 	ppi->ppi_req_outer = required_outer;
 	ppi->ppi_rows = rows;
 	ppi->ppi_clauses = pclauses;
+
+	if (parampathinfo_postinit_hook)
+		(*parampathinfo_postinit_hook)(ppi);
+
 	baserel->ppilist = lappend(baserel->ppilist, ppi);
 
 	return ppi;
@@ -1572,6 +1577,10 @@ get_joinrel_parampathinfo(PlannerInfo *root, RelOptInfo *joinrel,
 	ppi->ppi_req_outer = required_outer;
 	ppi->ppi_rows = rows;
 	ppi->ppi_clauses = NIL;
+
+	if (parampathinfo_postinit_hook)
+			(*parampathinfo_postinit_hook)(ppi);
+
 	joinrel->ppilist = lappend(joinrel->ppilist, ppi);
 
 	return ppi;
diff --git a/src/include/commands/explain.h b/src/include/commands/explain.h
index e94d9e49cf..667ba7e58d 100644
--- a/src/include/commands/explain.h
+++ b/src/include/commands/explain.h
@@ -75,6 +75,19 @@ extern PGDLLIMPORT ExplainOneQuery_hook_type ExplainOneQuery_hook;
 typedef const char *(*explain_get_index_name_hook_type) (Oid indexId);
 extern PGDLLIMPORT explain_get_index_name_hook_type explain_get_index_name_hook;
 
+/* Hook for plugins to get control in ExplainOnePlan() */
+typedef void (*ExplainOnePlan_hook_type) (PlannedStmt *plannedstmt, IntoClause *into,
+			   ExplainState *es, const char *queryString,
+			   ParamListInfo params, const instr_time *planduration,
+			   QueryEnvironment *queryEnv);
+extern PGDLLIMPORT ExplainOnePlan_hook_type ExplainOnePlan_hook;
+
+/* Explain a node info */
+typedef void (*ExplainOneNode_hook_type) (ExplainState *es,
+										 PlanState *ps,
+										 Plan *plan,
+										 double rows);
+extern PGDLLIMPORT ExplainOneNode_hook_type ExplainOneNode_hook;
 
 extern void ExplainQuery(ParseState *pstate, ExplainStmt *stmt,
 						 ParamListInfo params, DestReceiver *dest);
diff --git a/src/include/nodes/pathnodes.h b/src/include/nodes/pathnodes.h
index b7b2817a5d..a53b625e9e 100644
--- a/src/include/nodes/pathnodes.h
+++ b/src/include/nodes/pathnodes.h
@@ -751,6 +751,10 @@ typedef struct RelOptInfo
 	Relids		top_parent_relids;	/* Relids of topmost parents (if "other"
 									 * rel) */
 
+	/* For Adaptive optimization DEBUG purposes */
+	double		predicted_cardinality;
+	int			fss_hash;
+
 	/* used for partitioned relations: */
 	PartitionScheme part_scheme;	/* Partitioning scheme */
 	int			nparts;			/* Number of partitions; -1 if not yet set; in
@@ -1133,6 +1137,10 @@ typedef struct ParamPathInfo
 	Relids		ppi_req_outer;	/* rels supplying parameters used by path */
 	double		ppi_rows;		/* estimated number of result tuples */
 	List	   *ppi_clauses;	/* join clauses available from outer rels */
+
+	/* AQO DEBUG purposes */
+	double predicted_ppi_rows;
+	double fss_ppi_hash;
 } ParamPathInfo;
 
 
diff --git a/src/include/nodes/plannodes.h b/src/include/nodes/plannodes.h
index aaa3b65d04..bc126f8982 100644
--- a/src/include/nodes/plannodes.h
+++ b/src/include/nodes/plannodes.h
@@ -145,6 +145,19 @@ typedef struct Plan
 	List	   *initPlan;		/* Init Plan nodes (un-correlated expr
 								 * subselects) */
 
+	/*
+	 * information for adaptive query optimization
+	 */
+	bool		had_path;
+	List	   *path_clauses;
+	List	   *path_relids;
+	JoinType	path_jointype;
+	int			path_parallel_workers;
+	bool		was_parametrized;
+	/* For Adaptive optimization DEBUG purposes */
+	double		predicted_cardinality;
+	int			fss_hash;
+
 	/*
 	 * Information for management of parameter-change-driven rescanning
 	 *
diff --git a/src/include/optimizer/cost.h b/src/include/optimizer/cost.h
index 0fe60d82e4..892b8bb7ba 100644
--- a/src/include/optimizer/cost.h
+++ b/src/include/optimizer/cost.h
@@ -39,6 +39,37 @@ typedef enum
 }			ConstraintExclusionType;
 
 
+/* Hook for plugins to get control of cardinality estimation */
+typedef void (*set_baserel_rows_estimate_hook_type) (PlannerInfo *root,
+															RelOptInfo *rel);
+typedef void (*set_foreign_rows_estimate_hook_type) (PlannerInfo *root,
+													RelOptInfo *rel);
+extern PGDLLIMPORT set_baserel_rows_estimate_hook_type
+			set_baserel_rows_estimate_hook;
+extern PGDLLIMPORT set_foreign_rows_estimate_hook_type
+												set_foreign_rows_estimate_hook;
+typedef double (*get_parameterized_baserel_size_hook_type) (PlannerInfo *root,
+															 RelOptInfo *rel,
+														List *param_clauses);
+extern PGDLLIMPORT get_parameterized_baserel_size_hook_type
+			get_parameterized_baserel_size_hook;
+typedef double (*get_parameterized_joinrel_size_hook_type) (PlannerInfo *root,
+															 RelOptInfo *rel,
+															Path *outer_path,
+															Path *inner_path,
+													 SpecialJoinInfo *sjinfo,
+													 List *restrict_clauses);
+extern PGDLLIMPORT get_parameterized_joinrel_size_hook_type
+			get_parameterized_joinrel_size_hook;
+typedef void (*set_joinrel_size_estimates_hook_type) (PlannerInfo *root,
+															 RelOptInfo *rel,
+													   RelOptInfo *outer_rel,
+													   RelOptInfo *inner_rel,
+													 SpecialJoinInfo *sjinfo,
+														 List *restrictlist);
+extern PGDLLIMPORT set_joinrel_size_estimates_hook_type
+			set_joinrel_size_estimates_hook;
+
 /*
  * prototypes for costsize.c
  *	  routines to compute costs and sizes
@@ -180,10 +211,22 @@ extern void compute_semi_anti_join_factors(PlannerInfo *root,
 										   SpecialJoinInfo *sjinfo,
 										   List *restrictlist,
 										   SemiAntiJoinFactors *semifactors);
+extern void set_foreign_rows_estimate(PlannerInfo *root, RelOptInfo *rel);
+extern void set_baserel_rows_estimate(PlannerInfo *root, RelOptInfo *rel);
+extern void set_baserel_rows_estimate_standard(PlannerInfo *root, RelOptInfo *rel);
 extern void set_baserel_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern double get_parameterized_baserel_size(PlannerInfo *root,
 											 RelOptInfo *rel,
 											 List *param_clauses);
+extern double get_parameterized_baserel_size_standard(PlannerInfo *root,
+										RelOptInfo *rel,
+										List *param_clauses);
+extern double get_parameterized_joinrel_size_standard(PlannerInfo *root,
+										RelOptInfo *rel,
+										Path *outer_path,
+										Path *inner_path,
+										SpecialJoinInfo *sjinfo,
+										List *restrict_clauses);
 extern double get_parameterized_joinrel_size(PlannerInfo *root,
 											 RelOptInfo *rel,
 											 Path *outer_path,
@@ -195,6 +238,11 @@ extern void set_joinrel_size_estimates(PlannerInfo *root, RelOptInfo *rel,
 									   RelOptInfo *inner_rel,
 									   SpecialJoinInfo *sjinfo,
 									   List *restrictlist);
+extern void set_joinrel_size_estimates_standard(PlannerInfo *root, RelOptInfo *rel,
+									RelOptInfo *outer_rel,
+									RelOptInfo *inner_rel,
+									SpecialJoinInfo *sjinfo,
+									List *restrictlist);
 extern void set_subquery_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_function_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern void set_values_size_estimates(PlannerInfo *root, RelOptInfo *rel);
@@ -207,5 +255,7 @@ extern void set_foreign_size_estimates(PlannerInfo *root, RelOptInfo *rel);
 extern PathTarget *set_pathtarget_cost_width(PlannerInfo *root, PathTarget *target);
 extern double compute_bitmap_pages(PlannerInfo *root, RelOptInfo *baserel,
 								   Path *bitmapqual, int loop_count, Cost *cost, double *tuple);
+extern bool IsParallelTuplesProcessing(const Plan *plan);
+extern double get_parallel_divisor(int parallel_workers);
 
 #endif							/* COST_H */
diff --git a/src/include/optimizer/pathnode.h b/src/include/optimizer/pathnode.h
index 53261ee91f..4c6605a4ce 100644
--- a/src/include/optimizer/pathnode.h
+++ b/src/include/optimizer/pathnode.h
@@ -18,6 +18,10 @@
 #include "nodes/pathnodes.h"
 
 
+typedef void (*set_parampathinfo_postinit_hook_type) (ParamPathInfo *ppi);
+
+extern PGDLLIMPORT set_parampathinfo_postinit_hook_type parampathinfo_postinit_hook;
+
 /*
  * prototypes for pathnode.c
  */
diff --git a/src/include/optimizer/planmain.h b/src/include/optimizer/planmain.h
index bf1adfc52a..9c78e0f4e0 100644
--- a/src/include/optimizer/planmain.h
+++ b/src/include/optimizer/planmain.h
@@ -24,6 +24,12 @@ extern double cursor_tuple_fraction;
 /* query_planner callback to compute query_pathkeys */
 typedef void (*query_pathkeys_callback) (PlannerInfo *root, void *extra);
 
+
+/* Hook for plugins to get control in ExecutorRun() */
+typedef void (*create_plan_hook_type) (PlannerInfo *root,
+									   Path *best_path,
+									   Plan **plan);
+extern PGDLLIMPORT create_plan_hook_type create_plan_hook;
 /*
  * prototypes for plan/planmain.c
  */
